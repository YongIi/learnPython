# 开发人员：leo
# 开发时间：2022/10/16 22:21

# 多态

"""
简单地说，多态就是”具有多种形态“，它指的是：即便不知道一个变量所引用对象到底是什么类型，仍然可以通过这个变量调用方法，因为不同的对象都会重写这个方法（函数）
在运行过程中根据变量所引用对象的类型，动态决定调用哪个对象中的方法

讨论：因为Python的变量是没有数据类型的，所以很多人认为Python是没有多态的
虽然Python的变量是没有数据类型，但它具备多态的特征

"""

"""
静态语言和动态语言关于多态的区别

静态语言实现多带的三个必要条件：
1、继承
2、方法重写
3、父类引用指向子类对象
静态语言（eg：C++, java）必须明确继承关系，然后才可以多态

动态语言
动态语言的多态崇尚“鸭子类型”，不关心对象是什么类型，只关心对象的行为是否相似，有相同的行为（函数）即可多态，不需要有继承关系。
鸭子类型：如果一只鸟走起来像鸭子，飞起来像鸭子，那就可以把这只鸟称为鸭子。在鸭子类型中，不关心到底是不是鸭子，只关系对象是否有相同的行为。
"""

class Animal():
    def eat(self):
        print("动物要吃东西")

class Dog(Animal):
    def eat(self):
        print("狗吃肉")

class Cat(Animal):
    def eat(self):
        print("猫吃鱼")

class Person():
    def eat(self):
        print("人吃五谷杂粮")

# 多态的用法
def fun(obj):  # obj是形参变量，指向传入的对象
    obj.eat()  # 即便不知道一个变量所引用对象到底是什么类型，仍然可以通过这个变量调用方法，因为不同的对象都会重写这个方法（函数）

fun(Dog())  # 创建一个Dog()对象，传给形参
fun(Cat())  # 创建一个Cat()对象，传给形参
fun(Animal())
print("-----Python的多态不需要继承（那就没有重写方法），只要有相同的函数名即可多态，这一点与其他语言不一样-----")
fun(Person())  # 创建一个Person()对象，传给形参