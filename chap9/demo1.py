# 开发人员：leo
# 开发时间：2022/9/24 17:02

# 字符串的驻留机制

"""
字符串是基本数据类型，是一个不可变的字符序列

# 驻留机制

仅保存一份相同且不可变字符串，对相同的字符串只保留一份，
后续创建相同的字符串时不会开辟新空间，而是把该字符串的地址赋给新创建的变量，
不同的字符串被放在字符串的驻留池中

# 优点：
当需要相同的字符串时，可以直接从字符串池中拿来用，避免频繁的创建和销毁，提升效率和节约内存

缺点：
因此拼接字符串和修改字符串是比较影响性能的。因为拼接和修改字符串会产生新的字符串对象
在需要进行字符串拼接时建议使用str类型的join方法，而非+
因为join方法是先计算出所有字符串的长度，然后再拷贝，只new一次对象，效率要比+高


# 什么时候会有驻留机制
# 驻留机制的几种情况（在交互模型下测试，在shell中测试）
1、字符串的长度为0或1时
s1 = "%"
s2 = "%"
print(s1 is s2)  # True
2、符合标识符的字符串，即含有字母、数字、下划线的字符串，所以字符串中含有%、@等特殊字符时不会驻留
s1 = "abc%"
s2 = "abc%"
print(s1 == s2)  # True，值是相等的
print(s1 is s2)  # False，但PyCharm对字符串进行了优化处理，在PyCharm中结果为True
3、字符串只有编译时进行驻留，而非运行时 python还有编译过程？是，解释器也是先编译后运行
4、[-5,256]之间的整数数字

sys中的intern方法强制2个相同字符串指向同一个对象，避免内存浪费
PyCharm对字符串进行了优化处理
"""

# 字符串的驻留机制
a = 'Python'
b = "Python"
c = """Python"""
print(a, id(a))
print(b, id(b))
print(c, id(c))

# 1、字符串的长度为0或1时
s1 = ""
s2 = ""
print(s1 is s2)  # is 是判断id是否一致
s1 = "%"
s2 = "%"
print(s1 is s2)

# 2、符合标识符的字符串，即含有字母、数字、下划线的字符串，所以字符串中含有%、@等特殊字符时不会驻留
s1 = "abc%"
s2 = "abc%"
print(s1 == s2)
print(s1 is s2)  # 理应是False，但PyCharm对字符串进行了优化处理，结果为True

# 3、字符串只有编译时进行驻留，而非运行时
a = 'abc'
b = 'ab' + 'c'
c = ''.join(['ab','c'])  # join()作为函数并不会被编译器读取
print(a is b)  # True  b的值在编译时，运行前就链接完毕了
print(a is c)  # False  c是在运行时对列表中的数据进行链接的

# 4、[-5,256]之间的整数数字
a = -5
b = -5
a is b
a = -6
b = -6
a is b

# 强制驻留
# sys中的intern方法强制2个相同字符串指向同一个对象，避免内存浪费
import  sys
s1 = "abc%"
s2 = "abc%"
print(s1 is s2)  # 理应是False，但PyCharm对字符串进行了优化处理，结果为True
s1 =  sys.intern(s2)
print(s1 is s2)  # True
